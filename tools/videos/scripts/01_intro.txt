Screencast 1: Introduction to Git Town
======================================

Part 1: Summarize Git Town
----------------------------

Git Town adds a new commands to Git.
These new Git commands allow you to work with Git branches
much more efficiently than is possible with the standard Git commands.

Git Town stays true to Git's nature
as a flexible and powerful tool
that doesn't force you into one particular way of using it.

Git Town is already useful when using it just by yourself.
It really shines in collaborative scenarios
where you write code as part of a larger team of developers.

Git Town reduces and often completely eliminates merge conflicts.
It also prevents work getting lost through misuse of Git.

When your development team becomes the size of a small town
you might want to start using Git Town! (laugh)

Let's see how it works!

Part 2: Creating feature branches
---------------------------------

Here is a random software project that I work on.
Let's start hacking on a new feature!

```
git hack my-feature
```

Let's see what happened here.

(( highlight "git checkout -b my-feature" ))
Most people would simply run "git checkout -b feature-name" to do this.

(( highlight "git fetch --prune" ))
Before it does that, it pulls updates from the central code repository.

(( highlight "github.com" in the Git output ))
In this case, that's my Github repo.

(( highlight the SHAs of the downloaded commits on main ))
As we can see, other developers have added things to the main branch since I last updated my workspace.
That's great.

As you can already tell by now, we want to cut our new feature branch from the up-to-date main branch.

(( highlight "git rebase origin/main ))
Git Town does that here.

(( highlight "git checkout -b my-feature main ))
It then cuts the feature branch off the now up-to-date main branch.

This ensures that we work on the latest version of the codebase
and what do on this branch won't conflict with changes that other people made in the meantime.
